<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.boa.cashfilm.mapper.memberMapper">
	<!-- 회원 구분 삭제 -->
	<delete id="deleteMemberClassification" parameterType="int">
		DELETE FROM cfmemberclassification
		WHERE memberClassificationCode = #{memberClassificationCode}
	</delete>

	<!-- 회원 구분 수정 -->
	<update id="updateMemberClassification" parameterType="com.boa.cashfilm.member.dto.MemberClassification">
		UPDATE cfmemberclassification
		SET memberClassificationName = #{memberClassificationName}
		WHERE memberClassificationCode = #{memberClassificationCode}
	</update>
	
	<!-- 회원 구분 조회 -->
	<select id="selectMemberClassification" resultType="com.boa.cashfilm.member.dto.MemberClassification">
		SELECT
			memberClassificationCode
			, memberClassificationName
		FROM cfmemberclassification
	</select>
	
	<!-- 회원 구분 등록 -->
	<insert id="insertMemberClassification" parameterType="String">
		INSERT INTO cfmemberclassification (memberClassificationName)
		VALUES (#{memberClassificationName})
	</insert>
	
	<!-- 전체 회원 조회 -->
	<select id="selectMemberList" resultType="com.boa.cashfilm.member.dto.MemberList">
		SELECT
			e.memberEmail
			, c.memberClassificationName
			, e.memberName
			, e.memberCondition
		FROM cfmemberemail AS e
		INNER JOIN cfmemberclassification AS c
		ON e.memberClassificationCode = c.memberClassificationCode
		ORDER BY c.memberClassificationCode DESC
	</select>

	<!-- 회원 탈퇴 정보 삭제 :  -->
	
	
	<!-- 회원 탈퇴 요청 승인 -->
	<update id="updateMemberDel" parameterType="Map">
		UPDATE cfmemberdel
		SET
			memberDelDay = NOW()
			, memberDelApprovalEmail = #{memberDelApprovalEmail}
		WHERE memberEmail = #{memberEmail} AND memberDelRequestDay = #{memberDelRequestDay}
	</update>
	
	<!-- 회원 탈퇴 요청 조회 -->
	<select id="selectMemberDelList" resultType="com.boa.cashfilm.member.dto.MemberDel">
		SELECT
			memberEmail
			, memberDelRequestDay
			, memberDelDay
			, memberDelReason
			, memberDelApprovalEmail
		FROM cfmemberdel
		ORDER BY memberDelRequestDay DESC
	</select>
	
	<!-- 회원 탈퇴 요청 -->
	<insert id="insertMemberDel" parameterType="com.boa.cashfilm.member.dto.MemberCheck">
		INSERT INTO cfmemberdel (
			memberEmail
			, memberDelRequestDay
			, memberDelReason
		) VALUES (
			#{memberEmail}
			, NOW()
			, #{memberDelReason}
		)
	</insert>

	<!-- 회원 탈퇴 체크 처리 -->
	<select id="selectMemberDelCheck" parameterType="com.boa.cashfilm.member.dto.MemberCheck" resultType="int">
		SELECT COUNT(memberPassword)
		FROM cfmemberemail
		WHERE memberEmail = #{memberEmail}
		AND memberPassword = #{memberPassword}
	</select>

	<!-- 회원 정보 수정 처리 -->
	<insert id="insertMemberModification" parameterType="com.boa.cashfilm.member.dto.MemberInfo">
		UPDATE cfmemberemail AS e
		INNER JOIN cfmemberdetails AS d
		ON e.memberEmail = d.memberEmail
		SET
			e.memberName = #{memberName}
		<if test = "memberPassword != null || memberPassword != ''">
			, e.memberPassword = #{memberPassword}
		</if>
			, d.memberPhoneFirst = #{memberPhoneFirst}
			, d.memberPhoneSecond = #{memberPhoneSecond}
			, d.memberPostalCode = #{memberPostalCode}
			, d.memberAddress = #{memberAddress}
			, d.memberPhone = #{memberPhone}
		WHERE e.memberEmail = #{memberEmail}
	</insert>
	
	<!-- 회원 정보 수정 화면 -->
	<select id="selectMemberModification" parameterType="String" resultType="com.boa.cashfilm.member.dto.MemberInfo">
		SELECT
			e.memberEmail
			, e.memberName
			, d.memberPhoneFirst
			, d.memberPhoneSecond
			, d.memberPostalCode
			, d.memberAddress
			, d.memberPhone
		FROM cfmemberemail AS e 
		INNER JOIN cfmemberdetails AS d
		ON e.memberEmail = d.memberEmail
		WHERE e.memberEmail = #{memberEmail}
	</select>
	
	<!-- 회원 정보 조회 -->
	<select id="selectMemberInfo" parameterType="String" resultType="com.boa.cashfilm.member.dto.MemberInfo">
		SELECT
			e.memberEmail
			, e.memberName
			, d.memberPhoneFirst
			, d.memberPhoneSecond
			, d.memberPostalCode
			, d.memberAddress
			, d.memberPhone
			, d.memberSignDay
			, c.memberClassificationName
			, b.comName
		FROM cfmemberemail AS e 
		LEFT JOIN cfmemberdetails AS d
		ON e.memberEmail = d.memberEmail
		LEFT JOIN cfmemberclassification AS c
		ON e.memberClassificationCode = c.memberClassificationCode
		LEFT JOIN cfcombaseinfo AS b
		ON e.comCode = b.comCode
		WHERE e.memberEmail = #{memberEmail}
	</select>
	
	<!-- 회원가입 무료이용권 부여 (결제) -->
	<insert id="insertSignUpVoucherPayment" parameterType="int">
		INSERT INTO cfvoucherpayment (
			ordersCode
			, paymentMeansCode
			, voucherPaymentApproval
			, voucherPaymentDay
		) VALUES (
			#{ordersCode}
			, 1
			, 1
			, NOW()
		)
	</insert>
	
	<!-- 회원가입 무료이용권 부여 (주문조회) -->
	<select id="selectSignUpOrders" parameterType="String" resultType="int">
		SELECT
			MAX(ordersCode) AS ordersCode
		FROM cforders
		WHERE memberEmail = #{memberEmail}
	</select>
	
	<!-- 회원가입 무료이용권 부여 (주문) -->
	<insert id="insertSignUpOrders" parameterType="String">
		INSERT INTO cforders (
			memberEmail
			, comCode
			, myItemCode
		)
		VALUES (
			#{memberEmail}
			, 0
			, 1
		)
	</insert>

	<!-- 회원가입 상세 처리 -->
	<insert id="insertSignUpDetails" parameterType="com.boa.cashfilm.member.dto.MemberSignUp">
		INSERT INTO cfmemberdetails (
			memberEmail
			, memberPhoneFirst
			, memberPhoneSecond
			, memberPostalCode
			, memberAddress
			, memberCertification
			, memberPhone
			, memberSignDay
		) VALUES (
			#{memberEmail}
			, #{memberPhoneFirst}
			, #{memberPhoneSecond}
			, #{memberPostalCode}
			, #{memberAddress}
			, #{memberCertification}
			, #{memberPhone}
			, NOW()
		)
	</insert>

	<!-- 회원가입 간단 처리 -->
	<insert id="insertSignUpSimple" parameterType="com.boa.cashfilm.member.dto.MemberSignUp">
		INSERT INTO cfmemberemail (
			memberEmail
			, memberClassificationCode
			, comCode
			, memberName
			, memberPassword
			, memberCondition
		) VALUES (
			#{memberEmail}
			, 3
			, 0
			, #{memberName}
			, #{memberPassword}
			, '활동'
		)
	</insert>
	
	<!-- 이메일 중복 검사 -->
	<select id="selectEmailOverlap" parameterType="String" resultType="int">
		SELECT COUNT(memberEmail)
		FROM cfmemberemail
		WHERE memberEmail = #{memberEmail}
	</select>
	
	<!-- 로그인 처리 (기업결제 정보) -->
	<select id="selectSignInCompany" parameterType="com.boa.cashfilm.member.dto.MemberSimple" resultType="com.boa.cashfilm.member.dto.MemberSessionByCompanyPayment">
		SELECT 
			o.memberEmail
			, o.comCode
			, v.voucherPaymentCode
			, v.voucherPaymentDay
			, i.myItemCode
			, i.myItemName
		FROM cforders AS o
		INNER JOIN cfvoucherpayment AS v
		ON o.ordersCode = v.ordersCode
		INNER JOIN cfmyitem AS i
		ON o.myItemCode = i.myItemCode
		WHERE o.memberEmail = #{memberEmail}
		AND v.voucherPaymentDay 
			= (SELECT MAX(vo.voucherPaymentDay) FROM cfvoucherpayment AS vo
				INNER JOIN cforders AS od ON vo.ordersCode = od.ordersCode
				WHERE od.comCode = #{comCode} AND od.memberEmail = #{memberEmail})
	</select>
	
	<!-- 로그인 처리 (개인이메일과 기업이메일 일치여부) -->
	<select id="selectSignInEmailCheck" parameterType="int" resultType="com.boa.cashfilm.member.dto.MemberSimple">
		SELECT 
			memberEmail
			, comCode
		FROM cfcombaseinfo
		WHERE comCode = #{comCode}
	</select>
	
	<!-- 로그인 처리 (개인 및 개인결제 정보) -->
	<select id="selectSignInMember" parameterType="com.boa.cashfilm.member.dto.MemberCheck" resultType="com.boa.cashfilm.member.dto.MemberSession">
		SELECT 
			ecb.memberEmail
			, ecb.memberClassificationCode
			, ecb.memberClassificationName
			, ecb.comCode
			, ecb.comName
			, ecb.memberName
			, ecb.memberCondition
			, ovi.voucherPaymentCode
			, ovi.voucherPaymentDay
			, ovi.myItemCode
			, ovi.myItemName
		FROM (
			SELECT
				e.memberEmail
				, e.memberClassificationCode
				, c.memberClassificationName
				, e.comCode
				, b.comName
				, e.memberName
				, e.memberCondition
			FROM cfmemberemail AS e
			INNER JOIN cfmemberclassification AS c
			ON e.memberClassificationCode = c.memberClassificationCode
			LEFT JOIN cfcombaseinfo AS b
			ON e.comCode = b.comCode
			WHERE e.memberEmail = #{memberEmail}
			AND e.memberPassword = #{memberPassword}
		) AS ecb
		LEFT JOIN (
			SELECT 
				o.memberEmail
				, o.comCode
				, v.voucherPaymentCode
				, v.voucherPaymentDay
				, i.myItemCode
				, i.myItemName
			FROM cforders AS o
			INNER JOIN cfvoucherpayment AS v
			ON o.ordersCode = v.ordersCode
			INNER JOIN cfmyitem AS i
			ON o.myItemCode = i.myItemCode
			WHERE o.memberEmail = #{memberEmail}
			AND v.voucherPaymentDay 
				= ( SELECT MAX(vo.voucherPaymentDay) 
					FROM cfvoucherpayment AS vo
					INNER JOIN cforders AS od 
					ON vo.ordersCode = od.ordersCode
					WHERE od.comCode = 0
					AND od.memberEmail = #{memberEmail}
				)
		) AS ovi
		ON ecb.memberEmail = ovi.memberEmail
	</select>
</mapper>